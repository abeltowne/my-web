一：JS中继承的一些问题
1.原型继承会有带来实例1的改变属性，如push某个属性，增加其值，使得其他实例也会改变。
2。所以要结合原型和构造函数一起实现继承。一个是引用类型，一个是要创建自己的副本。
3.组合继承方式：用call和apply这种构造函数继承，创建副本，不改变父方法的属性，形成自己的属性个例；用原型方法继承共享的属性；

二：JS中的闭包问题
1.闭包是一个访问其他函数变量的函数。这涉及到了作用域的概念，作用域链的创建是和变量活动对象相应的，是需要占据内存的。
2.闭包只能保存某个外部变量的最后一个值，类似于循环传值的只能获取最后一个变量。
function createFunctions(){
    var result = new Array();
    for (var i=0; i < 10; i++){
        result[i] = function(){
return i; }; 
} 
    return result;
}
这个函数数组里面的每个值都是10；
3解决以上问题，要想到函数的传值是按值传递的，意味着可以在闭包里面在找一个变量，把i付值给变量，因为不是按照应用，所以，就会有不同的值传递给数组。
4.如果闭包作用域中包含HTML元素，就会使得元素无法被销毁，需要使用null，破除循环。

三：JS中的this使用也是博大精深
自己看高级程序设计中的第七章中的this讲解。
1.每个函数都会有this和argument两个变量，当搜索到变量的活动对象时候就停止。
2。可以通过其他变量让this指向内部作用域；


四，模拟块级作用域，在function用（）括起来，在后面跟一个括号，作用域就在其中了。
